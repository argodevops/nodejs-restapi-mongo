swagger: "2.0"
info:
  version: "1.0.0"
  title: "Book API with Swagger"
  description: "Noddy's Books API documentation"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
basePath: "/api"
tags:
- name: "Books"
- description: "Noddy's Books API"
paths:
  /login:
    get:
      tags:
      - "User"
      summary: "Login Page"
      produces:
      - "application/json"
      responses:
        200:
          description: "ok"
    post:
      tags:
      - "User"
      summary: "Login User"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user logging"
        required: true
        schema:
          $ref: "#/definitions/LoginUser"
      responses:
        200:
          description: "ok"
        401:
          description: "unauthorized"
        404:
          description: "not found"
  /logout:
    get:
      tags:
        - "User"
      summary: "Logout User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "token"
          in: "query"
          description: "The CSRF Token (any value will do)"
          required: true
          type: "string"
          example: "abc123abc"
        - name: "user"
          in: "query"
          description: "Username"
          required: true
          type: "string"
          example: "user1"
      responses:
        200:
          description: "ok"
        401:
          description: "unauthorized"
        404:
          description: "not found"
  /books:
    get:
      tags:
      - "Books"
      summary: "Get all books"
      produces: "application/json"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Books"
  /books/{author}:
    get:
      tags:
      - "Books"
      summary: "Get books by the author"
      produces: "application/json"
      parameters:
      - name: "author"
        in: "path"
        description: "Name of the author to search for"
        required: true
        type: "string"
        example: "Tester T"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Books"
  /book/{bookId}:
    get:
      produces: "application/json"
      tags:
      - "Book"
      summary: "Get all books"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book to obtain details of"
        required: true
        type: "integer"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "not found"
    delete:
      tags:
      - "Book"
      summary: "Delete a book"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book to delete"
        required: true
        type: "integer"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID format"
        404:
          description: "not found"
  /book:
    post:
      tags:
      - "Book"
      summary: "Add a book"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "book"
        description: "book to add"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Book"
        404:
          description: "not found"
    put:
      tags:
      - "Book"
      summary: "Update an existing book"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "Book object to update"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "bad format"
        404:
          description: "not found"
  /page/{title}:
    get:
      produces: "application/json"
      tags:
      - "Page"
      summary: "Get all books"
      parameters:
      - name: "title"
        in: "path"
        description: "Title of page to load"
        required: true
        type: "string"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Page"
        404:
          description: "not found"

definitions:
  LoginUser:
    type: "object"
    required:
    - "user"
    - "pass"
    - "token"
    properties:
      user:
        type: "string"
        example: "user1"
      pass:
        type: "string"
        example: "pass"
      token:
        type: "string"
        example: "abc123abc"
  Book:
    type: "object"
    required:
    - "_id"
    - "isbn"
    - "name"
    - "author"
    properties:
      _id:
        type: "integer"
        uniqueItems: true
      name:
        type: "string"
        example: "The book name"
      publishedDate:
        type: "date"
        example: "1991-01-01"
      author:
        type: "string"
        example: "Author Test"
      isbn:
        type: "string"
        example: "123583"
  Books:
    type: "array"
    $ref: "#/definitions/Book"
  Page:
    type: "object"
    required:
    - "_id"
    - "title"
    - "link"
    - "content"
    properties:
      _id:
        type: "integer"
        uniqueItems: true
      title:
        type: "string"
        example: "about"
      content:
        type: "string"
        example: "Some content for the about page"
      link:
        type: "string"
        example: "about"